Test Case ID: TC001
Test Case Title: Test Sign-Up Username Taken
Test Description: Verify that the system prevents sign-up with an already taken username.
Preconditions: Database contains a user with username 'testuser'.
Test Data: Username: testuser, Password: password123, Role: 1
Test Steps:
    1. In the main display, select Sign Up.
    2. Input username 'testuser' and password 'password123'.
    3. Select role '1' (Freelancer).
    4. Observe the output message.
Expected Results:
Step 1. System displays 'Username already taken!'.
Step 2. Sign-up process is aborted, no new user is created.
Actual Results:
Step 1. The message 'Username already taken!' was displayed.
Step 2. The sign-up attempt failed, and no user record was added.
Status: Pass
Remarks:
    * The `sign_up` method correctly checks for existing usernames before proceeding.
    * Error message clearly indicates the reason for failure.

Test Case ID: TC002
Test Case Title: Test Freelancer Sign-Up Success
Test Description: Verify that a freelancer can successfully sign up.
Preconditions: Database does not contain a user with username 'freelanceruser'.
Test Data: Username: freelanceruser, Password: password123, Role: 1, Name: Test Name, Skills: Python, Java, Experience: 5 years, Hourly Rate: 50, Payment Method: PayPal
Test Steps:
    1. In the main display, select Sign Up.
    2. Input username 'freelanceruser' and password 'password123'.
    3. Select role '1' (Freelancer).
    4. Input the required freelancer details (Name, Skills, Experience, Hourly Rate, Payment Method).
    5. Observe the output message.
Expected Results:
Step 1. System displays 'Sign-up successful!'.
Step 2. A new freelancer user is created in the database.
Step 3. A corresponding wallet entry is created for the user.
Actual Results:
Step 1. The message 'Sign-up successful!' was displayed.
Step 2. A new freelancer record was successfully added to the database.
Step 3. A wallet entry linked to the new user was created with a zero balance.
Status: Pass
Remarks:
    * The `sign_up` method successfully handles freelancer role selection.
    * Collects and stores freelancer-specific profile information (name, skills, etc.).
    * Correctly initializes a wallet entry for the new freelancer.
    * Includes basic input validation for hourly rate.

Test Case ID: TC003
Test Case Title: Test Employer Sign-Up Success
Test Description: Verify that an employer can successfully sign up.
Preconditions: Database does not contain a user with username 'employeruser'.
Test Data: Username: employeruser, Password: password123, Role: 2, Company Name: Test Company
Test Steps:
    1. In the main display, select Sign Up.
    2. Input username 'employeruser' and password 'password123'.
    3. Select role '2' (Employer).
    4. Input the company name 'Test Company'.
    5. Observe the output message.
Expected Results:
Step 1. System displays 'Sign-up successful!'.
Step 2. A new employer user is created in the database.
Step 3. A corresponding wallet entry is created for the user.
Actual Results:
Step 1. The message 'Sign-up successful!' was displayed.
Step 2. A new employer record was successfully added to the database.
Step 3. A wallet entry linked to the new user was created with a zero balance.
Status: Pass
Remarks:
    * The `sign_up` method successfully handles employer role selection.
    * Collects and stores employer-specific profile information (company name).
    * Correctly initializes a wallet entry for the new employer.

Test Case ID: TC004
Test Case Title: Test Login Success
Test Description: Verify that a user can successfully log in with valid credentials.
Preconditions: Database contains a user with username 'testuser' and matching password.
Test Data: Username: testuser, Password: password123
Test Steps:
    1. In the main display, select Login.
    2. Input username 'testuser' and password 'password123'.
    3. Observe the output message.
Expected Results:
Step 1. System displays 'Login successful!'.
Step 2. User is logged into the system.
Actual Results:
Step 1. The message 'Login successful!' was displayed.
Step 2. The user gained access to their account.
Status: Pass
Remarks:
    * The `login` method correctly verifies the username.
    * Compares the provided password against the stored hash using SHA256.
    * Instantiates the correct user subclass (Freelancer/Employer) based on the stored role.

Test Case ID: TC005
Test Case Title: Test Login Failure
Test Description: Verify that the system prevents login with invalid credentials.
Preconditions: Database does not contain a user with username 'wronguser'.
Test Data: Username: wronguser, Password: wrongpassword
Test Steps:
    1. In the main display, select Login.
    2. Input username 'wronguser' and password 'wrongpassword'.
    3. Observe the output message.
Expected Results:
Step 1. System displays 'Invalid username or password!'.
Step 2. User is not logged into the system.
Actual Results:
Step 1. The message 'Invalid username or password!' was displayed.
Step 2. Access to the system was denied.
Status: Pass
Remarks:
    * The `login` method handles cases where the username is not found.
    * Handles cases where the password hash does not match the stored hash.
    * Provides a generic error message for security (doesn't specify if username or password was wrong).